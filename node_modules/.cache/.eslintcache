[{"/Users/synesis/Documents/Developer/Counterview/src/index.js":"1","/Users/synesis/Documents/Developer/Counterview/src/App.js":"2","/Users/synesis/Documents/Developer/Counterview/src/reportWebVitals.js":"3","/Users/synesis/Documents/Developer/Counterview/src/components/NavBar.js":"4","/Users/synesis/Documents/Developer/Counterview/src/components/Fetch.js":"5","/Users/synesis/Documents/Developer/Counterview/src/components/Gallery.js":"6","/Users/synesis/Documents/Developer/Counterview/src/components/CreateCard.js":"7","/Users/synesis/Documents/Developer/Counterview/src/components/FindSrc.js":"8","/Users/synesis/Documents/Developer/Counterview/src/components/AutoComplete.js":"9","/Users/synesis/Documents/Developer/Counterview/src/components/LazyImage.js":"10"},{"size":547,"mtime":1634182994755,"results":"11","hashOfConfig":"12"},{"size":4197,"mtime":1635204082538,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1634178777864,"results":"14","hashOfConfig":"12"},{"size":4997,"mtime":1635205887590,"results":"15","hashOfConfig":"12"},{"size":2008,"mtime":1635202592801,"results":"16","hashOfConfig":"12"},{"size":174,"mtime":1634272121155,"results":"17","hashOfConfig":"12"},{"size":3158,"mtime":1635203467099,"results":"18","hashOfConfig":"12"},{"size":742,"mtime":1634275194487,"results":"19","hashOfConfig":"12"},{"size":4318,"mtime":1634711506405,"results":"20","hashOfConfig":"12"},{"size":430,"mtime":1635203481498,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pt3c51",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},"/Users/synesis/Documents/Developer/Counterview/src/index.js",[],"/Users/synesis/Documents/Developer/Counterview/src/App.js",["46"],"import './App.css'\nimport React, { useEffect, useState, useReducer } from \"react\"\nimport NavBar from \"./components/NavBar\"\nimport Gallery from \"./components/Gallery\"\nimport FindSrc from \"./components/FindSrc\"\nimport CreateCard from './components/CreateCard'\n\n// TODOD:\n// a. Load only when scroll down\n// 1. Make function that shows list of all fake pepes\n// 2. Make search data pull from form submit\n// 3. Enter submits search not reloads page\n\nfunction App() {\n    // Global variables\n    const [ wallet, setWallet ] = useState([])\n    const [ data, setData ] = useState({})\n    const [ pepeFilter, setPepeFilter ] = useState({\n        original: false,\n        fake: true\n    })\n\n    // Allows writing of parent data from child\n    // function onDataChange(input) {setData(input)}\n    // const onDataChange = input => {\n    //     setData({...data, input})\n    // }\n    function onDataChange(input) {\n        setData(input)\n    }\n    \n    // On data update begin populating gallery\n    useEffect(() => {\n        console.log(\"DATA\")\n        console.log(data)\n        console.log(typeof data)\n        // Filter JSON data for single asset or wallet balance\n        if((typeof data != \"undefined\") && data.asset) {\n            console.log(data.asset)\n            // Get asset details\n            const assetName = data[\"asset\"]\n            const assetQty = data[\"supply\"]\n            let asset_src_series = FindSrc(assetName)   // Checks against fake json and returns img src\n            const assetSrc = asset_src_series[0]\n            const series = asset_src_series[1]\n\n            // Create asset card\n            setWallet(<CreateCard key={1} series={series} asset={assetName} quantity={assetQty} src={assetSrc} type={\"asset\"} />)\n\n        } else if ((typeof data != \"undefined\") && (data.length > 1)) {\n            console.log(\"ADDRESS\")\n            console.log(data.length)\n            // Populate wallet with assets\n            if (data.length > 0) {\n\n                let cardList = []\n                let count = 0\n                const assetList = data\n                \n                assetList.forEach((asset) => {\n                    const assetName = asset[\"asset\"]\n                    const assetQty = asset[\"quantity\"]\n                    let asset_src_series = FindSrc(assetName) // Checks for src\n                    const assetSrc = asset_src_series[0]\n                    const series = asset_src_series[1]\n                    // If asset src is found append to list\n                    if(assetSrc !== \"null\") {\n                        // Check if asset matches filters\n                        if((pepeFilter.original && series === \"original\") || (pepeFilter.fake && series === \"fake\")) {\n                                cardList.push(\n                                    <CreateCard key={count} series={series} asset={assetName} quantity={assetQty} src={assetSrc} pepeFilter={pepeFilter} />\n                                )\n                                // Continue index count\n                                count += 1\n                            }\n                        }\n                })\n                \n                // Update wallet\n                setWallet(cardList)\n            }\n            \n        }\n    }, [data, pepeFilter])\n\n    // FILTER FUNCS\n    function onFilterChange(type) {\n        // If input is original filter toggles allow OG pepes\n        if(type === \"original\") {\n            setPepeFilter(prevState => ({\n                original: !prevState.original,\n                fake: prevState.fake\n            }))\n        } else if (type === \"fake\") {\n        // If input is fake filter toggles allow OG pepes\n            setPepeFilter(prevState => ({\n                original: prevState.original,\n                fake: !prevState.fake\n            }))\n        }\n    }\n\n    return (\n        <div>\n            <NavBar \n                data={data} \n                onDataChange={onDataChange}\n                pepeFilter={pepeFilter}\n                onFilterChange={onFilterChange}\n            />\n            <Gallery \n                wallet={wallet}\n                pepeFilter={pepeFilter}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","/Users/synesis/Documents/Developer/Counterview/src/reportWebVitals.js",[],"/Users/synesis/Documents/Developer/Counterview/src/components/NavBar.js",["47","48"],"/Users/synesis/Documents/Developer/Counterview/src/components/Fetch.js",["49","50","51","52"],"import React from 'react';\nimport axios from 'axios';\n// Takes in type of api call and value to search, returns JSON data\nconst Fetch = async (type, value) => {\n    // const res = await fetch(`https://xchain.io/api/${type}/${value}`)\n    // const json = await res.json()\n    // return json\n\n    const url = \"http://public.coindaddy.io:4000/api/\"\n    const headers = {'content-type': 'application/json'}\n    // const auth = HTTPBasicAuth('rpc', \"1234\")\n\n    if(type == \"asset\") {\n        console.log(\"asset POST\")\n        const response = await axios.post(url, {\n            \n                \"method\": \"get_asset_info\",\n                \"params\": {\n                    // # \"filter\": \"asset_name\", \"op\": \"==\", \"value\": asset\n                    // # \"asset\": asset\n                    \"assets\": [value]\n                },\n                \"jsonrpc\": \"2.0\",\n                \"id\": 0\n            },\n            { auth: {\n                username: \"rpc\",\n                password: \"1234\"\n            } }\n        )\n        console.log(response.data.result)\n        const result = response.data.result\n        return result[0]\n\n    } else if(type == \"balances\") {\n        console.log(\"balance POST\")\n        const response = await axios.post(url, {\n            \n                \"method\": \"get_balances\",\n                \"params\": {\n                    \"filters\": \n                        [\n                            {\"field\": \"address\", \"op\": \"==\", \"value\": value},\n                            {\"field\": \"quantity\", \"op\": \">\", \"value\": \"0\"}\n                        ],\n                    \"filterop\": \"AND\"\n                },\n                \"jsonrpc\": \"2.0\",\n                \"id\": 0\n            },\n            { auth: {\n                username: \"rpc\",\n                password: \"1234\"\n            } }\n        )\n        console.log(response.data.result)\n        const result = response.data.result\n        return result\n    } else {\n        console.log(\"not found\")\n        return null\n    }\n}\n\nexport default Fetch","/Users/synesis/Documents/Developer/Counterview/src/components/Gallery.js",[],"/Users/synesis/Documents/Developer/Counterview/src/components/CreateCard.js",["53","54","55","56","57","58"],"import React, { useState, useEffect } from \"react\"\nimport Fetch from \"./Fetch\"\nimport LazyImage from \"./LazyImage\"\n\nimport placeholder from \"../data/placeholder.jpg\"\n\n// Takes in image src, asset name and \n// quantity to return an image card for gallery view\n// TODO: Create alternative display for MP4\nfunction CreateCard(props) {\n    const [ toggle, setToggle ] = useState({\n        info: false\n    })\n    const [ info, setInfo ] = useState({\n        supply: 0,\n        est_value: \"$0\",\n        dispenser_price: \"0 BTC\"\n    })\n    const [ callInfo , setCallInfo ] = useState(false)\n\n    // Creates class names for card\n    const className = `image-card ${props.series}`\n\n    // Sets state for info toggle\n    function changeToggle() {\n        setToggle(prevState => ({\n            info: !prevState.info\n        }))\n    }\n\n    // // Runs on call info so not to continuously call\n    // useEffect(() => {\n    //     // Updates asset and market info on toggle\n    //     const updateData = async () => {\n    //         // Update info\n    //         const asset_info = await Fetch(\"asset\", props.asset)\n    //         let val_usd = \"Priceless\"\n    //         if(asset_info[\"estimated_value\"][\"usd\"] > 0.0) {\n    //             val_usd = parseFloat(asset_info[\"estimated_value\"][\"usd\"]).toFixed(4)\n    //         }\n\n    //         // Update dispenser\n    //         const asset_disp = await Fetch(\"dispensers\", props.asset)\n    //         let dispenser_btc = \"\"\n    //         if(asset_disp[\"data\"].length > 0) {\n    //             dispenser_btc = ((parseFloat(asset_disp[\"data\"][0][\"satoshirate\"]).toFixed(4)).toString() + \"BTC\")\n    //         } else {\n    //             dispenser_btc = \"Priceless\"\n    //         }\n\n    //         setInfo(prevState => ({\n    //             supply: asset_info[\"supply\"],\n    //             est_value: val_usd.toString(),\n    //             dispenser_price: dispenser_btc.toString()\n    //         }))\n    //     }\n    //     updateData()\n    // }, [callInfo])\n\n    useState(() => {\n        // console.log(info)\n    }, [info])\n\n\n    // Info component\n    const cardInfo = (\n        <span\n            className=\"card-info\"\n        >\n            <span className=\"fill\"></span>\n            <p>INFO</p>\n            <p><a href={`https://xchain.io/asset/${props.asset}`} target=\"_blank\">XCHAIN</a></p>\n            <p>SUPPLY: {props.quantity}</p>\n            <p>EST VAL: {info.est_value}</p>\n            <p>LAST DISP: {info.dispenser_price}</p>\n        </span>\n    )\n\n    return (\n        <span \n            className={className}\n            onClick={() => {\n                \n            }}\n        >\n            {toggle.info ? cardInfo : null}\n            {/* <img \n                alt={props.asset}\n                src={props.src}\n            /> */}\n            <LazyImage src={props.src} placeholder={placeholder} />\n            <p \n                className=\"asset-info\"\n                onClick={() => {\n                    changeToggle()\n                }}\n            >\n                <span>{props.asset}</span>\n                <span>{props.quantity}</span>\n            </p>\n        </span>\n    )\n}\n\nexport default CreateCard","/Users/synesis/Documents/Developer/Counterview/src/components/FindSrc.js",[],"/Users/synesis/Documents/Developer/Counterview/src/components/AutoComplete.js",[],"/Users/synesis/Documents/Developer/Counterview/src/components/LazyImage.js",["59","60"],"import React, { Component } from \"react\"\n\nclass LazyImage extends React.Component {\n    state = { src: null };\n\n    componentDidMount() {\n    const { src } = this.props;\n\n    const imageLoader = new Image();\n    imageLoader.src = src;\n\n    imageLoader.onload = () => {\n        this.setState({ src });\n    };\n    }\n\n    render() {\n    return <img src={this.state.src || this.props.placeholder} />;\n    }\n}\n\nexport default LazyImage",{"ruleId":"61","severity":1,"message":"62","line":2,"column":38,"nodeType":"63","messageId":"64","endLine":2,"endColumn":48},{"ruleId":"61","severity":1,"message":"65","line":11,"column":14,"nodeType":"63","messageId":"64","endLine":11,"endColumn":25},{"ruleId":"66","severity":1,"message":"67","line":39,"column":8,"nodeType":"68","endLine":39,"endColumn":16,"suggestions":"69"},{"ruleId":"61","severity":1,"message":"70","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":13},{"ruleId":"61","severity":1,"message":"71","line":10,"column":11,"nodeType":"63","messageId":"64","endLine":10,"endColumn":18},{"ruleId":"72","severity":1,"message":"73","line":13,"column":13,"nodeType":"74","messageId":"75","endLine":13,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":35,"column":20,"nodeType":"74","messageId":"75","endLine":35,"endColumn":22},{"ruleId":"61","severity":1,"message":"76","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"77","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":13},{"ruleId":"61","severity":1,"message":"78","line":14,"column":19,"nodeType":"63","messageId":"64","endLine":14,"endColumn":26},{"ruleId":"61","severity":1,"message":"79","line":19,"column":13,"nodeType":"63","messageId":"64","endLine":19,"endColumn":21},{"ruleId":"61","severity":1,"message":"80","line":19,"column":24,"nodeType":"63","messageId":"64","endLine":19,"endColumn":35},{"ruleId":"81","severity":1,"message":"82","line":72,"column":16,"nodeType":"83","messageId":"84","endLine":72,"endColumn":83,"fix":"85"},{"ruleId":"61","severity":1,"message":"86","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},{"ruleId":"87","severity":1,"message":"88","line":18,"column":12,"nodeType":"83","endLine":18,"endColumn":66},"no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'handleInput' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["89"],"'React' is defined but never used.","'headers' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'Fetch' is defined but never used.","'setInfo' is assigned a value but never used.","'callInfo' is assigned a value but never used.","'setCallInfo' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"90","text":"91"},"'Component' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"92","fix":"93"},[2313,2313]," rel=\"noreferrer\"","Update the dependencies array to be: [props, result]",{"range":"94","text":"95"},[1244,1252],"[props, result]"]