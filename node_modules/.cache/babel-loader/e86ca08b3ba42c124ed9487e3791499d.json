{"ast":null,"code":"var _jsxFileName = \"/Users/synesis/Documents/Developer/Counterview/src/components/CreateCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Fetch from \"./Fetch\"; // Takes in image src, asset name and \n// quantity to return an image card for gallery view\n// TODO: Create alternative display for MP4\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CreateCard(props) {\n  _s();\n\n  const [toggle, setToggle] = useState({\n    info: false\n  });\n  const [info, setInfo] = useState({\n    est_value: \"Priceless\",\n    supply: 0,\n    dispenser_price: 0\n  });\n  const [callInfo, setCallInfo] = useState(false); // Creates class names for card\n\n  const className = `image-card ${props.series}`; // Sets state for info toggle\n\n  function changeToggle() {\n    setToggle(prevState => ({\n      info: !prevState.info\n    }));\n  } // Runs on call info so not to continuously call\n\n\n  useEffect(() => {\n    // Updates asset and market info on toggle\n    const updateData = async () => {\n      // Update info\n      const asset_info = await Fetch(\"asset\", props.asset);\n      console.log(asset_info); // Update dispenser\n      // const asset_disp = await Fetch(\"dispensers\", props.asset)\n      // console.log(asset_disp)\n    };\n\n    updateData();\n  }, [callInfo]); // Info component\n\n  const cardInfo = /*#__PURE__*/_jsxDEV(\"span\", {\n    class: \"card-info\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      class: \"fill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"INFO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://xchain.io/asset/${props.asset}`,\n        target: \"_blank\",\n        children: \"XCHAIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: className,\n    onClick: () => {\n      console.log(props.asset);\n    },\n    children: [toggle.info ? cardInfo : null, /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: props.asset,\n      src: props.src\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"asset-info\",\n      onClick: () => {\n        changeToggle();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: props.asset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: props.quantity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateCard, \"73mrH3+gzzUxVSkMzY3iE0l5JU0=\");\n\n_c = CreateCard;\nexport default CreateCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateCard\");","map":{"version":3,"sources":["/Users/synesis/Documents/Developer/Counterview/src/components/CreateCard.js"],"names":["React","useState","useEffect","Fetch","CreateCard","props","toggle","setToggle","info","setInfo","est_value","supply","dispenser_price","callInfo","setCallInfo","className","series","changeToggle","prevState","updateData","asset_info","asset","console","log","cardInfo","src","quantity"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;AACA;;;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACvB,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBN,QAAQ,CAAC;AACnCO,IAAAA,IAAI,EAAE;AAD6B,GAAD,CAAtC;AAGA,QAAM,CAAEA,IAAF,EAAQC,OAAR,IAAoBR,QAAQ,CAAC;AAC/BS,IAAAA,SAAS,EAAE,WADoB;AAE/BC,IAAAA,MAAM,EAAE,CAFuB;AAG/BC,IAAAA,eAAe,EAAE;AAHc,GAAD,CAAlC;AAKA,QAAM,CAAEC,QAAF,EAAaC,WAAb,IAA6Bb,QAAQ,CAAC,KAAD,CAA3C,CATuB,CAWvB;;AACA,QAAMc,SAAS,GAAI,cAAaV,KAAK,CAACW,MAAO,EAA7C,CAZuB,CAcvB;;AACA,WAASC,YAAT,GAAwB;AACpBV,IAAAA,SAAS,CAACW,SAAS,KAAK;AACpBV,MAAAA,IAAI,EAAE,CAACU,SAAS,CAACV;AADG,KAAL,CAAV,CAAT;AAGH,GAnBsB,CAqBvB;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA,UAAMiB,UAAU,GAAG,YAAY;AAC3B;AACA,YAAMC,UAAU,GAAG,MAAMjB,KAAK,CAAC,OAAD,EAAUE,KAAK,CAACgB,KAAhB,CAA9B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ,EAH2B,CAK3B;AACA;AACA;AACH,KARD;;AASAD,IAAAA,UAAU;AACb,GAbQ,EAaN,CAACN,QAAD,CAbM,CAAT,CAtBuB,CAsCvB;;AACA,QAAMW,QAAQ,gBACV;AACI,IAAA,KAAK,EAAC,WADV;AAAA,4BAGI;AAAM,MAAA,KAAK,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,6BAAG;AAAG,QAAA,IAAI,EAAG,2BAA0BnB,KAAK,CAACgB,KAAM,EAAhD;AAAmD,QAAA,MAAM,EAAC,QAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAH;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;;AAUA,sBACI;AACI,IAAA,SAAS,EAAEN,SADf;AAEI,IAAA,OAAO,EAAE,MAAM;AACXO,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAK,CAACgB,KAAlB;AACH,KAJL;AAAA,eAMKf,MAAM,CAACE,IAAP,GAAcgB,QAAd,GAAyB,IAN9B,eAOI;AACI,MAAA,GAAG,EAAEnB,KAAK,CAACgB,KADf;AAEI,MAAA,GAAG,EAAEhB,KAAK,CAACoB;AAFf;AAAA;AAAA;AAAA;AAAA,YAPJ,eAWI;AACI,MAAA,SAAS,EAAC,YADd;AAEI,MAAA,OAAO,EAAE,MAAM;AACXR,QAAAA,YAAY;AACf,OAJL;AAAA,8BAMI;AAAA,kBAAOZ,KAAK,CAACgB;AAAb;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA,kBAAOhB,KAAK,CAACqB;AAAb;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH;;GAxEQtB,U;;KAAAA,U;AA0ET,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Fetch from \"./Fetch\"\n\n// Takes in image src, asset name and \n// quantity to return an image card for gallery view\n// TODO: Create alternative display for MP4\nfunction CreateCard(props) {\n    const [ toggle, setToggle ] = useState({\n        info: false\n    })\n    const [ info, setInfo ] = useState({\n        est_value: \"Priceless\",\n        supply: 0,\n        dispenser_price: 0\n    })\n    const [ callInfo , setCallInfo ] = useState(false)\n\n    // Creates class names for card\n    const className = `image-card ${props.series}`\n\n    // Sets state for info toggle\n    function changeToggle() {\n        setToggle(prevState => ({\n            info: !prevState.info\n        }))\n    }\n\n    // Runs on call info so not to continuously call\n    useEffect(() => {\n\n        // Updates asset and market info on toggle\n        const updateData = async () => {\n            // Update info\n            const asset_info = await Fetch(\"asset\", props.asset)\n            console.log(asset_info)\n\n            // Update dispenser\n            // const asset_disp = await Fetch(\"dispensers\", props.asset)\n            // console.log(asset_disp)\n        }\n        updateData()\n    }, [callInfo])\n\n\n    // Info component\n    const cardInfo = (\n        <span\n            class=\"card-info\"\n        >\n            <span class=\"fill\"></span>\n            <p>INFO</p>\n            <p><a href={`https://xchain.io/asset/${props.asset}`} target=\"_blank\">XCHAIN</a></p>\n        </span>\n    )\n\n    return (\n        <span \n            className={className}\n            onClick={() => {\n                console.log(props.asset)\n            }}\n        >\n            {toggle.info ? cardInfo : null}\n            <img \n                alt={props.asset}\n                src={props.src}\n            />\n            <p \n                className=\"asset-info\"\n                onClick={() => {\n                    changeToggle()\n                }}\n            >\n                <span>{props.asset}</span>\n                <span>{props.quantity}</span>\n            </p>\n        </span>\n    )\n}\n\nexport default CreateCard"]},"metadata":{},"sourceType":"module"}