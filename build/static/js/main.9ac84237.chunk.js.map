{"version":3,"sources":["components/Fetch.js","components/NavBar.js","components/Gallery.js","components/FindSrc.js","components/CreateCard.js","App.js","reportWebVitals.js","index.js"],"names":["Fetch","type","value","a","console","log","fetch","res","json","NavBar","props","useState","input","setInput","result","setResult","searchType","setSearchType","search","length","useEffect","onDataChange","onSearchTypeChange","Navbar","collapseOnSelect","className","expand","variant","Container","Brand","href","Toggle","Collapse","id","Nav","Link","target","Form","FormControl","placeholder","onChange","e","handleInput","Button","onClick","Gallery","wallet","FindSrc","assetName","src","fakeData","forEach","fakePepe","CreateCard","asset","quantity","App","setWallet","data","setData","assetQty","assetSrc","cardList","count","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ac84237.chunk.js","sourcesContent":["// Takes in type of api call and value to search, returns JSON data\nconst Fetch = async (type, value) => {\n    console.log(`https://xchain.io/api/${type}/${value}`)\n    const res = await fetch(`https://xchain.io/api/${type}/${value}`)\n    const json = await res.json()\n    return json\n}\n\nexport default Fetch","import React, { useState, useEffect } from \"react\"\nimport { Container, Nav, Navbar, NavDropdown, Form, FormControl, Button } from \"react-bootstrap\"\nimport Fetch from \"./Fetch\"\n\nfunction NavBar(props) {\n    const [ input, setInput ] = useState(\"\")    // Search input box value\n    const [ result, setResult ] = useState(\"\")  // Fetch results\n    const [ searchType, setSearchType ] = useState(\"\")\n\n    // 1. Handles search input\n    function handleInput(input) {\n        setInput(input)\n    }\n\n    // 2. Receives search input and filters length to determine if asset or address then fetches API data\n    const search = async (value) => {\n\n        // If text input is not length of address then search for asset\n        if(value.length < 33) {\n            // setResult(Fetch(\"asset\", searchValue))\n            const res = await Fetch(\"asset\", value)\n            setResult(res)\n            setSearchType(\"asset\")\n        } else {\n        // Search an address\n            // setResult(Fetch(\"address\", searchValue))\n            const res = await Fetch(\"balances\", value)\n            setResult(res)\n            setSearchType(\"address\")\n        }\n    }\n\n    // 3. Updates wallet values when async is complete\n    useEffect(() => {\n        // Passes JSON data to parent\n        props.onDataChange(result)\n    }, [result])\n\n    useEffect(() => {\n        // Passes search type to parent\n        props.onSearchTypeChange(searchType)\n    }, [searchType])\n\n    return (\n        <Navbar collapseOnSelect className=\"navBar\" expand=\"lg\"variant=\"dark\">\n            <Container>\n                <Navbar.Brand href=\"\" className=\"logo\">Counterview.club</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"me-auto\">\n                    <Nav.Link \n                        href=\"https://fapep.github.io/FABRIQUE/counterview.html\"\n                        target=\"_blank\"\n                    >About</Nav.Link>\n                    {/* <NavDropdown title=\"Donate\" id=\"collasible-nav-dropdown\">\n                    <NavDropdown.Item \n                        href=\"\"\n                        onClick={() => {navigator.clipboard.writeText(\"1EWFR9dMzM2JtrXeqwVCY1LW6KMZ1iRhJ5\")}}\n                    >\n                            <span className=\"text-wrap\">Copy XCP Address</span>\n                        </NavDropdown.Item>\n                    </NavDropdown> */}\n                </Nav>\n                <Form className=\"d-flex\">\n                <FormControl\n                    type=\"search\"\n                    placeholder=\"Search asset or address\"\n                    className=\"mr-2 search-field\"\n                    aria-label=\"Search\"\n                    onChange={(e)=>{\n                        handleInput(e.target.value)\n                    }}\n                />\n                <Button \n                    variant=\"outline-success\"\n                    className=\"search-button\"\n                    onClick={() => {\n                        search(input)\n                    }}\n                >Search</Button>\n                </Form>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default NavBar","import React from \"react\"\n\nfunction Gallery(props) {\n\n    return (\n        <div className=\"gallery\">\n            {props.wallet}\n        </div>\n    )\n}\n\nexport default Gallery","import fakeData from \"../data/fakedata.json\"\n\nfunction FindSrc(assetName) {\n    let src = \"null\"\n    fakeData.forEach(function (fakePepe) {\n        // If asset is in fakeData\n        if((assetName) && (assetName === fakePepe[\"asset\"])) {\n            src = fakePepe[\"src\"]\n        }\n    })\n\n    return src\n}\n\nexport default FindSrc","import React from \"react\"\n\nfunction CreateCard(props) {\n    // Takes in image src, asset name and \n    // quantity to return an image card for gallery view\n    \n    // TODO: Create alternative display for MP4\n\n    return (\n        <span \n            className=\"image-card\"\n        >\n            <img \n                src={props.src}\n            />\n            <p className=\"asset-name\">\n                <span>{props.asset}</span>\n                <span>{props.quantity}</span>\n            </p>\n        </span>\n    )\n}\n\nexport default CreateCard","import './App.css'\nimport React, { useEffect, useState } from \"react\"\nimport NavBar from \"./components/NavBar\"\nimport Gallery from \"./components/Gallery\"\nimport FindSrc from \"./components/FindSrc\"\nimport CreateCard from './components/CreateCard'\n\n// TODOD:\n// 1. Make function that shows list of all fake pepes\n// 2. Make search data pull from form submit\n// 3. Enter submits search not reloads page\n\nfunction App() {\n    // Global variables\n    const [ wallet, setWallet ] = useState([])\n    const [ data, setData ] = useState({})\n    const [ searchType, setSearchType ] = useState(\"\")\n\n    // Allows writing of parent data from child\n    function onDataChange(input) {setData(input)}\n    function onSearchTypeChange(input) {setSearchType(input)}\n\n    // On data update begin populating gallery\n    useEffect(() => {\n        // Filter JSON data for single asset or wallet balance\n        if(data[\"asset\"]) {\n\n            // Get asset details\n            const assetName = data[\"asset\"]\n            const assetQty = data[\"supply\"]\n            let assetSrc = FindSrc(assetName)\n\n            // Create asset card\n            // setWallet({\"asset\": assetName, \"quantity\": assetQty, \"src\": assetSrc})\n            setWallet(<CreateCard key={1} asset={assetName} quantity={assetQty} src={assetSrc} type={\"asset\"} />)\n\n        } else if (data[\"data\"]) {\n\n            // Populate wallet with assets\n            if (data[\"data\"].length > 0) {\n\n                console.log(\"Parsing data\")\n                let cardList = []\n                let count = 0\n                const assetList = data[\"data\"]\n                \n                assetList.forEach((asset) => {\n                    const assetName = asset[\"asset\"]\n                    const assetQty = asset[\"quantity\"]\n                    let assetSrc = FindSrc(assetName)\n                    // If asset src is found append to list\n                    if(assetSrc != \"null\") {\n                            cardList.push(\n                                <CreateCard key={count} asset={assetName} quantity={assetQty} src={assetSrc} type={\"address\"} />\n                            )\n                            // Continue index count\n                            count += 1\n                        }\n                })\n                \n                // Update wallet\n                setWallet(cardList)\n            }\n            \n        }\n    }, [data])\n\n    // When wallet state is updated\n    useEffect(() => {\n        \n    }, [wallet])\n\n    return (\n        <div>\n            <NavBar \n                data={data} \n                onDataChange={onDataChange}\n                onSearchTypeChange={onSearchTypeChange}\n            />\n            <Gallery \n                wallet={wallet}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}