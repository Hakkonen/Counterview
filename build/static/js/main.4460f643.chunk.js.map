{"version":3,"sources":["components/Fetch.js","components/AutoComplete.js","components/NavBar.js","components/Gallery.js","components/FindSrc.js","components/CreateCard.js","App.js","reportWebVitals.js","index.js"],"names":["Fetch","type","value","a","fetch","res","json","AutoComplete","props","useState","autoComplete","setAutoComplete","showComplete","setShowComplete","addresses","setAddresses","input","setInput","search","assets","FakeData","map","obj","series","asset","OGPepe","handleSearch","length","parseInt","Set","JSONAddresses","JSON","stringify","localStorage","setItem","useEffect","lsAdresses","parse","getItem","error","console","log","InputGroup","Dropdown","Menu","show","as","className","i","Item","id","onClick","e","target","align","Badge","bg","variant","style","float","color","pill","Header","address","textOverflow","innerText","FormControl","placeholder","onChange","filter","includes","toUpperCase","handleInput","NavBar","result","setResult","onDataChange","Navbar","collapseOnSelect","expand","Container","Brand","href","Toggle","Collapse","Nav","Link","pepeFilter","original","onFilterChange","fake","Form","onSubmit","preventDefault","handleSubmit","Button","Gallery","wallet","FindSrc","assetName","src","fakeData","forEach","fakePepe","ogData","ogPepe","CreateCard","info","toggle","setToggle","supply","est_value","dispenser_price","setInfo","callInfo","updateData","asset_info","val_usd","parseFloat","toFixed","asset_disp","dispenser_btc","toString","prevState","cardInfo","alt","quantity","App","setWallet","data","setData","setPepeFilter","assetQty","asset_src_series","assetSrc","cardList","count","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4460f643.chunk.js","sourcesContent":["// Takes in type of api call and value to search, returns JSON data\nconst Fetch = async (type, value) => {\n    const res = await fetch(`https://xchain.io/api/${type}/${value}`)\n    const json = await res.json()\n    return json\n}\n\nexport default Fetch","// Made by Liam\nimport { useState, useEffect } from \"react\";\nimport FakeData from \"../data/fakedata.json\";\nimport OGPepe from \"../data/og_pepe.json\";\n\nimport { Dropdown, FormControl, InputGroup, Badge } from \"react-bootstrap\";\n\nexport default function AutoComplete(props) {\n  const [autoComplete, setAutoComplete] = useState([]);\n  const [showComplete, setShowComplete] = useState(false);\n  const [addresses, setAddresses] = useState([]);\n\n  const { input, setInput, search } = props;\n\n  //   get asset names\n  const assets = [\n    ...FakeData.map((obj) => {\n      return { series: obj.series, asset: obj.asset };\n    }),\n    ...OGPepe.map((obj) => {\n      return { series: obj.series, asset: obj.asset };\n    }),\n  ];\n\n  const handleSearch = async (value) => {\n    // If text input is not length of address then search for asset\n\n    if (value.length < 33 && !parseInt(input[0])) {\n      // setResult(Fetch(\"asset\", searchValue))\n\n      setShowComplete(false);\n      setAutoComplete([]);\n      search(input);\n    }\n    if (parseInt(input[0]) === 1 && input.length >= 25 && input.length <= 35) {\n      setAddresses([...new Set([value, ...addresses])]);\n      const JSONAddresses = JSON.stringify(addresses);\n\n      localStorage.setItem(\"addresses\", JSONAddresses);\n      search(input);\n      // Search an address\n      // setResult(Fetch(\"address\", searchValue))\n    }\n  };\n\n  function handleInput(input) {\n    setShowComplete(false);\n    setAutoComplete([]);\n    // check if it's an asset\n    if (input.length > 0 && !parseInt(input[0])) {\n      setAutoComplete(\n        assets.filter((asset) => asset.asset.includes(input.toUpperCase()))\n      );\n      if (autoComplete.length > 0) setShowComplete(true);\n    }\n    // if it starts with 1, it's probably an address\n    if (parseInt(input[0]) === 1 && addresses.length >= 1) {\n      setShowComplete(true);\n    }\n    setInput(input);\n  }\n\n  //   get addresses from localstorage\n  useEffect(() => {\n    try {\n      const lsAdresses = JSON.parse(localStorage.getItem(\"addresses\"));\n\n      if (lsAdresses !== null) setAddresses(lsAdresses);\n    } catch (error) {\n      console.log(\"couldn't parse addresses\");\n    }\n  }, []);\n\n  return (\n    <InputGroup>\n      {showComplete && (\n        <Dropdown.Menu show as='div' className='w-100'>\n          {autoComplete.map(\n            (asset, i) =>\n              i < 10 && (\n                <Dropdown.Item\n                  className='w-100'\n                  id={asset.asset}\n                  onClick={(e) => {\n                    console.log(e.target.id);\n                    handleSearch(e.target.id);\n                    setInput(e.target.id);\n                    setShowComplete(false);\n                  }}\n                  key={i}>\n                  <span align='start'>{asset.asset}</span>\n                  <Badge\n                    bg='light'\n                    variant='light'\n                    style={{ float: \"right\", color: \"#212121\" }}\n                    pill\n                    className='ml-auto'>\n                    {asset.series && asset.series}\n                  </Badge>\n                </Dropdown.Item>\n              )\n          )}\n          {addresses.length >= 1 && (\n            <Dropdown.Header>Address History</Dropdown.Header>\n          )}\n          {addresses.length >= 1 &&\n            addresses.map(\n              (address, i) =>\n                i < 5 && (\n                  <Dropdown.Item\n                    className='text-truncate'\n                    style={{ textOverflow: \"ellipsis\" }}\n                    as='div'\n                    onClick={(e) => {\n                        console.log(e.target.innerText);\n                        handleSearch(e.target.innerText);\n                        setInput(e.target.innerText);\n                        setShowComplete(false);\n                    }}\n                    variant='secondary'\n                    key={i}>\n                    {address}\n                  </Dropdown.Item>\n                )\n            )}\n        </Dropdown.Menu>\n      )}\n      <FormControl\n        type='search'\n        value={input}\n        placeholder={\"Search asset or address\"}\n        className='mr-2 search-field'\n        aria-label='Search'\n        onChange={(e) => {\n            handleInput(e.target.value);\n        }}\n      />\n    </InputGroup>\n  );\n}","import React, { useState, useEffect } from \"react\"\nimport { Container, Nav, Navbar, Form, FormControl, Button } from \"react-bootstrap\"\nimport Fetch from \"./Fetch\"\nimport AutoComplete from \"./AutoComplete\";\n\nfunction NavBar(props) {\n    const [ input, setInput ] = useState(\"\")    // Search input box value\n    const [ result, setResult ] = useState(\"\")  // Fetch results\n\n    // 1. Handles search input\n    function handleInput(input) {\n        setInput(input)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n    }\n\n    // 2. Receives search input and filters length to determine if asset or address then fetches API data\n    const search = async (value) => {\n\n        // If text input is not length of address then search for asset\n        if(value.length < 33) {\n            const res = await Fetch(\"asset\", value)\n            setResult(res)\n        } else {\n        // Search an address\n            const res = await Fetch(\"balances\", value)\n            setResult(res)\n        }\n    }\n\n    // 3. Updates wallet values when async is complete\n    useEffect(() => {\n        // Passes JSON data to parent\n        props.onDataChange(result)\n    }, [result])\n    \n    return (\n        <Navbar collapseOnSelect className=\"navBar\" expand=\"lg\"variant=\"dark\">\n            <Container>\n                <Navbar.Brand href=\"\" className=\"logo\">Counterview.club</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"me-auto\">\n                    <Nav.Link \n                        className={props.pepeFilter.original ? \"selected-filter\" : \"nav-link\"}\n                        onClick={() => {\n                            props.onFilterChange(\"original\")\n                        }}\n                    >OG Peps</Nav.Link>\n                    <Nav.Link \n                        className={props.pepeFilter.fake ? \"selected-filter\" : \"nav-link\"}\n                        onClick={() => {\n                            props.onFilterChange(\"fake\")\n                        }}\n                    >Fakes</Nav.Link>\n                    <Nav.Link \n                        href=\"https://fapep.github.io/FABRIQUE/\"\n                        target=\"_blank\"\n                    >About</Nav.Link>\n                </Nav>\n                <Form \n                    id=\"search-input\"\n                    className=\"d-flex\"\n                    onClick={(e) => {\n                        // console.log(e.target)\n                    }}\n                    onSubmit={(e) => {\n                        handleSubmit(e)\n                    }}\n                >\n                <AutoComplete \n                    className=\"mr-2 search-field\"\n                    setInput={setInput} \n                    search={search} \n                    input={input} \n                />\n                {/* <FormControl\n                    type=\"search\"\n                    placeholder=\"Search asset or address\"\n                    className=\"mr-2 search-field\"\n                    aria-label=\"Search\"\n                    onChange={(e)=>{\n                        handleInput(e.target.value)\n                    }}\n                /> */}\n                <Button \n                    variant=\"outline-success\"\n                    className=\"search-button\"\n                    onClick={() => {\n                        search(input)\n                    }}\n                >Search</Button>\n                </Form>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default NavBar","import React from \"react\"\n\nfunction Gallery(props) {\n\n    return (\n        <div className=\"gallery\">\n            {props.wallet}\n        </div>\n    )\n}\n\nexport default Gallery","import fakeData from \"../data/fakedata.json\"\nimport ogData from \"../data/og_pepe.json\"\n\n// Gets asset data for all wallet contents\nfunction FindSrc(assetName) {\n    let src = \"null\"\n    let series = \"\"\n    // If asset is in fakeData\n    fakeData.forEach(function (fakePepe) {\n        if((assetName) && (assetName === fakePepe[\"asset\"])) {\n            series = fakePepe[\"series\"]\n            src = fakePepe[\"src\"]\n            return false\n        }\n    })\n    // If asset is in og data\n    ogData.forEach(function (ogPepe) {\n        if((assetName) && (assetName === ogPepe[\"asset\"])) {\n            series = \"original\"\n            src = ogPepe[\"src\"]\n            return false\n        }\n    })\n\n    return [src, series]\n}\n\nexport default FindSrc","import React, { useState, useEffect } from \"react\"\nimport Fetch from \"./Fetch\"\n\n// Takes in image src, asset name and \n// quantity to return an image card for gallery view\n// TODO: Create alternative display for MP4\nfunction CreateCard(props) {\n    const [ toggle, setToggle ] = useState({\n        info: false\n    })\n    const [ info, setInfo ] = useState({\n        supply: 0,\n        est_value: \"$0\",\n        dispenser_price: \"0 BTC\"\n    })\n    const [ callInfo , setCallInfo ] = useState(false)\n\n    // Creates class names for card\n    const className = `image-card ${props.series}`\n\n    // Sets state for info toggle\n    function changeToggle() {\n        setToggle(prevState => ({\n            info: !prevState.info\n        }))\n    }\n\n    // Runs on call info so not to continuously call\n    useEffect(() => {\n        // Updates asset and market info on toggle\n        const updateData = async () => {\n            // Update info\n            const asset_info = await Fetch(\"asset\", props.asset)\n            let val_usd = \"Priceless\"\n            if(asset_info[\"estimated_value\"][\"usd\"] > 0.0) {\n                val_usd = parseFloat(asset_info[\"estimated_value\"][\"usd\"]).toFixed(4)\n            }\n\n            // Update dispenser\n            const asset_disp = await Fetch(\"dispensers\", props.asset)\n            let dispenser_btc = \"\"\n            if(asset_disp[\"data\"].length > 0) {\n                dispenser_btc = ((parseFloat(asset_disp[\"data\"][0][\"satoshirate\"]).toFixed(4)).toString() + \"BTC\")\n            } else {\n                dispenser_btc = \"Priceless\"\n            }\n\n            setInfo(prevState => ({\n                supply: asset_info[\"supply\"],\n                est_value: val_usd.toString(),\n                dispenser_price: dispenser_btc.toString()\n            }))\n        }\n        updateData()\n    }, [callInfo])\n\n    useState(() => {\n        // console.log(info)\n    }, [info])\n\n\n    // Info component\n    const cardInfo = (\n        <span\n            className=\"card-info\"\n        >\n            <span className=\"fill\"></span>\n            <p>INFO</p>\n            <p><a href={`https://xchain.io/asset/${props.asset}`} target=\"_blank\">XCHAIN</a></p>\n            <p>SUPPLY: {info.supply}</p>\n            <p>EST VAL: {info.est_value}</p>\n            <p>LAST DISP: {info.dispenser_price}</p>\n        </span>\n    )\n\n    return (\n        <span \n            className={className}\n            onClick={() => {\n                \n            }}\n        >\n            {toggle.info ? cardInfo : null}\n            <img \n                alt={props.asset}\n                src={props.src}\n            />\n            <p \n                className=\"asset-info\"\n                onClick={() => {\n                    changeToggle()\n                }}\n            >\n                <span>{props.asset}</span>\n                <span>{props.quantity}</span>\n            </p>\n        </span>\n    )\n}\n\nexport default CreateCard","import './App.css'\nimport React, { useEffect, useState } from \"react\"\nimport NavBar from \"./components/NavBar\"\nimport Gallery from \"./components/Gallery\"\nimport FindSrc from \"./components/FindSrc\"\nimport CreateCard from './components/CreateCard'\n\n// TODOD:\n// a. Load only when scroll down\n// 1. Make function that shows list of all fake pepes\n// 2. Make search data pull from form submit\n// 3. Enter submits search not reloads page\n\nfunction App() {\n    // Global variables\n    const [ wallet, setWallet ] = useState([])\n    const [ data, setData ] = useState({})\n    const [ pepeFilter, setPepeFilter ] = useState({\n        original: false,\n        fake: true\n    })\n\n    // Allows writing of parent data from child\n    function onDataChange(input) {setData(input)}\n    \n    // On data update begin populating gallery\n    useEffect(() => {\n        // Filter JSON data for single asset or wallet balance\n        if(data[\"asset\"]) {\n\n            // Get asset details\n            const assetName = data[\"asset\"]\n            const assetQty = data[\"supply\"]\n            let asset_src_series = FindSrc(assetName)   // Checks against fake json and returns img src\n            const assetSrc = asset_src_series[0]\n            const series = asset_src_series[1]\n\n            // Create asset card\n            setWallet(<CreateCard key={1} series={series} asset={assetName} quantity={assetQty} src={assetSrc} type={\"asset\"} />)\n\n        } else if (data[\"data\"]) {\n\n            // Populate wallet with assets\n            if (data[\"data\"].length > 0) {\n\n                let cardList = []\n                let count = 0\n                const assetList = data[\"data\"]\n                \n                assetList.forEach((asset) => {\n                    const assetName = asset[\"asset\"]\n                    const assetQty = asset[\"quantity\"]\n                    let asset_src_series = FindSrc(assetName) // Checks for src\n                    const assetSrc = asset_src_series[0]\n                    const series = asset_src_series[1]\n                    // If asset src is found append to list\n                    if(assetSrc !== \"null\") {\n                        // Check if asset matches filters\n                        if((pepeFilter.original && series === \"original\") || (pepeFilter.fake && series === \"fake\")) {\n                                cardList.push(\n                                    <CreateCard key={count} series={series} asset={assetName} quantity={assetQty} src={assetSrc} pepeFilter={pepeFilter} />\n                                )\n                                // Continue index count\n                                count += 1\n                            }\n                        }\n                })\n                \n                // Update wallet\n                setWallet(cardList)\n            }\n            \n        }\n    }, [data, pepeFilter])\n\n    // FILTER FUNCS\n    function onFilterChange(type) {\n        // If input is original filter toggles allow OG pepes\n        if(type === \"original\") {\n            setPepeFilter(prevState => ({\n                original: !prevState.original,\n                fake: prevState.fake\n            }))\n        } else if (type === \"fake\") {\n        // If input is fake filter toggles allow OG pepes\n            setPepeFilter(prevState => ({\n                original: prevState.original,\n                fake: !prevState.fake\n            }))\n        }\n    }\n\n    return (\n        <div>\n            <NavBar \n                data={data} \n                onDataChange={onDataChange}\n                pepeFilter={pepeFilter}\n                onFilterChange={onFilterChange}\n            />\n            <Gallery \n                wallet={wallet}\n                pepeFilter={pepeFilter}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}