{"version":3,"sources":["components/Fetch.js","components/NavBar.js","components/Gallery.js","components/FindSrc.js","components/CreateCard.js","App.js","reportWebVitals.js","index.js"],"names":["Fetch","type","value","a","fetch","res","json","NavBar","props","useState","input","setInput","result","setResult","search","length","useEffect","onDataChange","Navbar","collapseOnSelect","className","expand","variant","Container","Brand","href","Toggle","Collapse","id","Nav","Link","pepeFilter","original","onClick","onFilterChange","fake","target","Form","e","onSubmit","preventDefault","handleSubmit","FormControl","placeholder","onChange","handleInput","Button","Gallery","wallet","FindSrc","assetName","src","series","fakeData","forEach","fakePepe","ogData","ogPepe","CreateCard","info","toggle","setToggle","supply","est_value","dispenser_price","setInfo","callInfo","updateData","asset","asset_info","val_usd","parseFloat","toFixed","asset_disp","dispenser_btc","toString","prevState","cardInfo","alt","quantity","App","setWallet","data","setData","setPepeFilter","assetQty","asset_src_series","assetSrc","cardList","count","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f3b0b5b.chunk.js","sourcesContent":["// Takes in type of api call and value to search, returns JSON data\nconst Fetch = async (type, value) => {\n    const res = await fetch(`https://xchain.io/api/${type}/${value}`)\n    const json = await res.json()\n    return json\n}\n\nexport default Fetch","import React, { useState, useEffect } from \"react\"\nimport { Container, Nav, Navbar, Form, FormControl, Button } from \"react-bootstrap\"\nimport Fetch from \"./Fetch\"\n\nfunction NavBar(props) {\n    const [ input, setInput ] = useState(\"\")    // Search input box value\n    const [ result, setResult ] = useState(\"\")  // Fetch results\n\n    // 1. Handles search input\n    function handleInput(input) {\n        setInput(input)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n    }\n\n    // 2. Receives search input and filters length to determine if asset or address then fetches API data\n    const search = async (value) => {\n\n        // If text input is not length of address then search for asset\n        if(value.length < 33) {\n            const res = await Fetch(\"asset\", value)\n            setResult(res)\n        } else {\n        // Search an address\n            const res = await Fetch(\"balances\", value)\n            setResult(res)\n        }\n    }\n\n    // 3. Updates wallet values when async is complete\n    useEffect(() => {\n        // Passes JSON data to parent\n        props.onDataChange(result)\n    }, [result])\n    \n    return (\n        <Navbar collapseOnSelect className=\"navBar\" expand=\"lg\"variant=\"dark\">\n            <Container>\n                <Navbar.Brand href=\"\" className=\"logo\">Counterview.club</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"me-auto\">\n                    <Nav.Link \n                        className={props.pepeFilter.original ? \"selected-filter\" : \"nav-link\"}\n                        onClick={() => {\n                            props.onFilterChange(\"original\")\n                        }}\n                    >OG Peps</Nav.Link>\n                    <Nav.Link \n                        className={props.pepeFilter.fake ? \"selected-filter\" : \"nav-link\"}\n                        onClick={() => {\n                            props.onFilterChange(\"fake\")\n                        }}\n                    >Fakes</Nav.Link>\n                    <Nav.Link \n                        href=\"https://fapep.github.io/FABRIQUE/\"\n                        target=\"_blank\"\n                    >About</Nav.Link>\n                </Nav>\n                <Form \n                    id=\"search-input\"\n                    className=\"d-flex\"\n                    onClick={(e) => {\n                        // console.log(e.target)\n                    }}\n                    onSubmit={(e) => {\n                        handleSubmit(e)\n                    }}\n                >\n                <FormControl\n                    type=\"search\"\n                    placeholder=\"Search asset or address\"\n                    className=\"mr-2 search-field\"\n                    aria-label=\"Search\"\n                    onChange={(e)=>{\n                        handleInput(e.target.value)\n                    }}\n                />\n                <Button \n                    variant=\"outline-success\"\n                    className=\"search-button\"\n                    onClick={() => {\n                        search(input)\n                    }}\n                >Search</Button>\n                </Form>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default NavBar","import React from \"react\"\n\nfunction Gallery(props) {\n\n    return (\n        <div className=\"gallery\">\n            {props.wallet}\n        </div>\n    )\n}\n\nexport default Gallery","import fakeData from \"../data/fakedata.json\"\nimport ogData from \"../data/og_pepe.json\"\n\n// Gets asset data for all wallet contents\nfunction FindSrc(assetName) {\n    let src = \"null\"\n    let series = \"\"\n    // If asset is in fakeData\n    fakeData.forEach(function (fakePepe) {\n        if((assetName) && (assetName === fakePepe[\"asset\"])) {\n            series = fakePepe[\"series\"]\n            src = fakePepe[\"src\"]\n            return false\n        }\n    })\n    // If asset is in og data\n    ogData.forEach(function (ogPepe) {\n        if((assetName) && (assetName === ogPepe[\"asset\"])) {\n            series = \"original\"\n            src = ogPepe[\"src\"]\n            return false\n        }\n    })\n\n    return [src, series]\n}\n\nexport default FindSrc","import React, { useState, useEffect } from \"react\"\nimport Fetch from \"./Fetch\"\n\n// Takes in image src, asset name and \n// quantity to return an image card for gallery view\n// TODO: Create alternative display for MP4\nfunction CreateCard(props) {\n    const [ toggle, setToggle ] = useState({\n        info: false\n    })\n    const [ info, setInfo ] = useState({\n        supply: 0,\n        est_value: \"$0\",\n        dispenser_price: \"0 BTC\"\n    })\n    const [ callInfo , setCallInfo ] = useState(false)\n\n    // Creates class names for card\n    const className = `image-card ${props.series}`\n\n    // Sets state for info toggle\n    function changeToggle() {\n        setToggle(prevState => ({\n            info: !prevState.info\n        }))\n    }\n\n    // Runs on call info so not to continuously call\n    useEffect(() => {\n        // Updates asset and market info on toggle\n        const updateData = async () => {\n            // Update info\n            const asset_info = await Fetch(\"asset\", props.asset)\n            let val_usd = \"Priceless\"\n            if(asset_info[\"estimated_value\"][\"usd\"] > 0.0) {\n                val_usd = parseFloat(asset_info[\"estimated_value\"][\"usd\"]).toFixed(4)\n            }\n\n            // Update dispenser\n            const asset_disp = await Fetch(\"dispensers\", props.asset)\n            let dispenser_btc = \"\"\n            if(asset_disp[\"data\"].length > 0) {\n                dispenser_btc = ((parseFloat(asset_disp[\"data\"][0][\"satoshirate\"]).toFixed(4)).toString() + \"BTC\")\n            } else {\n                dispenser_btc = \"Priceless\"\n            }\n\n            setInfo(prevState => ({\n                supply: asset_info[\"supply\"],\n                est_value: val_usd.toString(),\n                dispenser_price: dispenser_btc.toString()\n            }))\n        }\n        updateData()\n    }, [callInfo])\n\n    useState(() => {\n        // console.log(info)\n    }, [info])\n\n\n    // Info component\n    const cardInfo = (\n        <span\n            className=\"card-info\"\n        >\n            <span className=\"fill\"></span>\n            <p>INFO</p>\n            <p><a href={`https://xchain.io/asset/${props.asset}`} target=\"_blank\">XCHAIN</a></p>\n            <p>SUPPLY: {info.supply}</p>\n            <p>EST VAL: {info.est_value}</p>\n            <p>LAST DISP: {info.dispenser_price}</p>\n        </span>\n    )\n\n    return (\n        <span \n            className={className}\n            onClick={() => {\n                \n            }}\n        >\n            {toggle.info ? cardInfo : null}\n            <img \n                alt={props.asset}\n                src={props.src}\n            />\n            <p \n                className=\"asset-info\"\n                onClick={() => {\n                    changeToggle()\n                }}\n            >\n                <span>{props.asset}</span>\n                <span>{props.quantity}</span>\n            </p>\n        </span>\n    )\n}\n\nexport default CreateCard","import './App.css'\nimport React, { useEffect, useState } from \"react\"\nimport NavBar from \"./components/NavBar\"\nimport Gallery from \"./components/Gallery\"\nimport FindSrc from \"./components/FindSrc\"\nimport CreateCard from './components/CreateCard'\n\n// TODOD:\n// a. Load only when scroll down\n// 1. Make function that shows list of all fake pepes\n// 2. Make search data pull from form submit\n// 3. Enter submits search not reloads page\n\nfunction App() {\n    // Global variables\n    const [ wallet, setWallet ] = useState([])\n    const [ data, setData ] = useState({})\n    const [ pepeFilter, setPepeFilter ] = useState({\n        original: false,\n        fake: true\n    })\n\n    // Allows writing of parent data from child\n    function onDataChange(input) {setData(input)}\n    \n    // On data update begin populating gallery\n    useEffect(() => {\n        // Filter JSON data for single asset or wallet balance\n        if(data[\"asset\"]) {\n\n            // Get asset details\n            const assetName = data[\"asset\"]\n            const assetQty = data[\"supply\"]\n            let asset_src_series = FindSrc(assetName)   // Checks against fake json and returns img src\n            const assetSrc = asset_src_series[0]\n            const series = asset_src_series[1]\n\n            // Create asset card\n            setWallet(<CreateCard key={1} series={series} asset={assetName} quantity={assetQty} src={assetSrc} type={\"asset\"} />)\n\n        } else if (data[\"data\"]) {\n\n            // Populate wallet with assets\n            if (data[\"data\"].length > 0) {\n\n                let cardList = []\n                let count = 0\n                const assetList = data[\"data\"]\n                \n                assetList.forEach((asset) => {\n                    const assetName = asset[\"asset\"]\n                    const assetQty = asset[\"quantity\"]\n                    let asset_src_series = FindSrc(assetName) // Checks for src\n                    const assetSrc = asset_src_series[0]\n                    const series = asset_src_series[1]\n                    // If asset src is found append to list\n                    if(assetSrc !== \"null\") {\n                        // Check if asset matches filters\n                        if((pepeFilter.original && series === \"original\") || (pepeFilter.fake && series === \"fake\")) {\n                                cardList.push(\n                                    <CreateCard key={count} series={series} asset={assetName} quantity={assetQty} src={assetSrc} pepeFilter={pepeFilter} />\n                                )\n                                // Continue index count\n                                count += 1\n                            }\n                        }\n                })\n                \n                // Update wallet\n                setWallet(cardList)\n            }\n            \n        }\n    }, [data, pepeFilter])\n\n    // FILTER FUNCS\n    function onFilterChange(type) {\n        // If input is original filter toggles allow OG pepes\n        if(type === \"original\") {\n            setPepeFilter(prevState => ({\n                original: !prevState.original,\n                fake: prevState.fake\n            }))\n        } else if (type === \"fake\") {\n        // If input is fake filter toggles allow OG pepes\n            setPepeFilter(prevState => ({\n                original: prevState.original,\n                fake: !prevState.fake\n            }))\n        }\n    }\n\n    return (\n        <div>\n            <NavBar \n                data={data} \n                onDataChange={onDataChange}\n                pepeFilter={pepeFilter}\n                onFilterChange={onFilterChange}\n            />\n            <Gallery \n                wallet={wallet}\n                pepeFilter={pepeFilter}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}