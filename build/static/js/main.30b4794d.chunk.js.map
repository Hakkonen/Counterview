{"version":3,"sources":["components/Fetch.js","components/AutoComplete.js","components/NavBar.js","components/Gallery.js","components/FindSrc.js","components/LazyImage.js","data/placeholder.jpg","components/CreateCard.js","App.js","reportWebVitals.js","index.js"],"names":["Fetch","type","value","a","url","console","log","axios","post","auth","username","password","response","data","result","AutoComplete","props","useState","autoComplete","setAutoComplete","showComplete","setShowComplete","addresses","setAddresses","input","setInput","search","assets","FakeData","map","obj","series","asset","OGPepe","handleSearch","length","parseInt","Set","JSONAddresses","JSON","stringify","localStorage","setItem","useEffect","lsAdresses","parse","getItem","error","InputGroup","Dropdown","Menu","show","as","className","i","Item","id","onClick","e","target","align","Badge","bg","variant","style","float","color","pill","Header","address","textOverflow","innerText","FormControl","placeholder","onChange","filter","includes","toUpperCase","handleInput","NavBar","supply","setResult","res","onDataChange","Navbar","collapseOnSelect","expand","Container","Brand","href","Toggle","Collapse","Nav","NavDropdown","title","Link","pepeFilter","fake","onFilterChange","nowrap","navigator","clipboard","writeText","Form","onSubmit","preventDefault","handleSubmit","Button","Gallery","wallet","FindSrc","assetName","src","fakeData","forEach","fakePepe","ogData","ogPepe","LazyImage","state","this","imageLoader","Image","onload","setState","React","Component","CreateCard","info","toggle","setToggle","est_value","dispenser_price","cardInfo","quantity","prevState","App","setWallet","setData","original","setPepeFilter","assetQty","asset_src_series","assetSrc","cardList","count","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30b4794d.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n// Takes in type of api call and value to search, returns JSON data\nconst Fetch = async (type, value) => {\n    // const res = await fetch(`https://xchain.io/api/${type}/${value}`)\n    // const json = await res.json()\n    // return json\n\n    const url = \"http://public.coindaddy.io:4000/api/\"\n    const headers = {'content-type': 'application/json'}\n    // const auth = HTTPBasicAuth('rpc', \"1234\")\n\n    if(type == \"asset\") {\n        console.log(\"asset POST\")\n        const response = await axios.post(url, {\n            \n                \"method\": \"get_asset_info\",\n                \"params\": {\n                    // # \"filter\": \"asset_name\", \"op\": \"==\", \"value\": asset\n                    // # \"asset\": asset\n                    \"assets\": [value]\n                },\n                \"jsonrpc\": \"2.0\",\n                \"id\": 0\n            },\n            { auth: {\n                username: \"rpc\",\n                password: \"1234\"\n            } }\n        )\n        console.log(response.data.result)\n        const result = response.data.result\n        return result[0]\n\n    } else if(type == \"balances\") {\n        console.log(\"balance POST\")\n        const response = await axios.post(url, {\n            \n                \"method\": \"get_balances\",\n                \"params\": {\n                    \"filters\": \n                        [\n                            {\"field\": \"address\", \"op\": \"==\", \"value\": value},\n                            {\"field\": \"quantity\", \"op\": \">\", \"value\": \"0\"}\n                        ],\n                    \"filterop\": \"AND\"\n                },\n                \"jsonrpc\": \"2.0\",\n                \"id\": 0\n            },\n            { auth: {\n                username: \"rpc\",\n                password: \"1234\"\n            } }\n        )\n        console.log(response.data.result)\n        const result = response.data.result\n        return result\n    } else {\n        console.log(\"not found\")\n        return null\n    }\n}\n\nexport default Fetch","// Made by Liam\nimport { useState, useEffect } from \"react\";\nimport FakeData from \"../data/fakedata.json\";\nimport OGPepe from \"../data/og_pepe.json\";\n\nimport { Dropdown, FormControl, InputGroup, Badge } from \"react-bootstrap\";\n\nexport default function AutoComplete(props) {\n  const [autoComplete, setAutoComplete] = useState([]);\n  const [showComplete, setShowComplete] = useState(false);\n  const [addresses, setAddresses] = useState([]);\n\n  const { input, setInput, search } = props;\n\n  //   get asset names\n  const assets = [\n    ...FakeData.map((obj) => {\n      return { series: obj.series, asset: obj.asset };\n    }),\n    ...OGPepe.map((obj) => {\n      return { series: obj.series, asset: obj.asset };\n    }),\n  ];\n\n  const handleSearch = async (value) => {\n    // If text input is not length of address then search for asset\n\n    if (value.length < 33 && !parseInt(input[0])) {\n      // setResult(Fetch(\"asset\", searchValue))\n\n      setShowComplete(false);\n      setAutoComplete([]);\n      search(input);\n    }\n    if (parseInt(input[0]) === 1 && input.length >= 25 && input.length <= 35) {\n      setAddresses([...new Set([value, ...addresses])]);\n      const JSONAddresses = JSON.stringify(addresses);\n\n      localStorage.setItem(\"addresses\", JSONAddresses);\n      search(input);\n      // Search an address\n      // setResult(Fetch(\"address\", searchValue))\n    }\n  };\n\n  function handleInput(input) {\n    setShowComplete(false);\n    setAutoComplete([]);\n    // check if it's an asset\n    if (input.length > 0 && !parseInt(input[0])) {\n      setAutoComplete(\n        assets.filter((asset) => asset.asset.includes(input.toUpperCase()))\n      );\n      if (autoComplete.length > 0) setShowComplete(true);\n    }\n    // if it starts with 1, it's probably an address\n    if (parseInt(input[0]) === 1 && addresses.length >= 1) {\n      setShowComplete(true);\n    }\n    setInput(input);\n  }\n\n  //   get addresses from localstorage\n  useEffect(() => {\n    try {\n      const lsAdresses = JSON.parse(localStorage.getItem(\"addresses\"));\n\n      if (lsAdresses !== null) setAddresses(lsAdresses);\n    } catch (error) {\n      console.log(\"couldn't parse addresses\");\n    }\n  }, []);\n\n  return (\n    <InputGroup>\n      {showComplete && (\n        <Dropdown.Menu show as='div' className='w-100'>\n          {autoComplete.map(\n            (asset, i) =>\n              i < 10 && (\n                <Dropdown.Item\n                  className='w-100'\n                  id={asset.asset}\n                  onClick={(e) => {\n                    console.log(e.target.id);\n                    handleSearch(e.target.id);\n                    setInput(e.target.id);\n                    setShowComplete(false);\n                  }}\n                  key={i}>\n                  <span align='start'>{asset.asset}</span>\n                  <Badge\n                    bg='light'\n                    variant='light'\n                    style={{ float: \"right\", color: \"#212121\" }}\n                    pill\n                    className='ml-auto'>\n                    {asset.series && asset.series}\n                  </Badge>\n                </Dropdown.Item>\n              )\n          )}\n          {addresses.length >= 1 && (\n            <Dropdown.Header>Address History</Dropdown.Header>\n          )}\n          {addresses.length >= 1 &&\n            addresses.map(\n              (address, i) =>\n                i < 5 && (\n                  <Dropdown.Item\n                    className='text-truncate'\n                    style={{ textOverflow: \"ellipsis\" }}\n                    as='div'\n                    onClick={(e) => {\n                        console.log(e.target.innerText);\n                        handleSearch(e.target.innerText);\n                        setInput(e.target.innerText);\n                        setShowComplete(false);\n                    }}\n                    variant='secondary'\n                    key={i}>\n                    {address}\n                  </Dropdown.Item>\n                )\n            )}\n        </Dropdown.Menu>\n      )}\n      <FormControl\n        type='search'\n        value={input}\n        placeholder={\"Search asset or address\"}\n        className='mr-2 search-field'\n        aria-label='Search'\n        onChange={(e) => {\n            handleInput(e.target.value);\n        }}\n      />\n    </InputGroup>\n  );\n}","import React, { useState, useEffect } from \"react\"\nimport { Container, Nav, Navbar, Form, NavDropdown, Button } from \"react-bootstrap\"\nimport Fetch from \"./Fetch\"\nimport AutoComplete from \"./AutoComplete\";\n\nfunction NavBar(props) {\n    const [ input, setInput ] = useState(\"\")    // Search input box value\n    const [ result, setResult ] = useState({asset: \"\", supply: \"0\"})  // Fetch results\n\n    // 1. Handles search input\n    function handleInput(input) {\n        setInput(input)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n    }\n\n    // 2. Receives search input and filters length to determine if asset or address then fetches API data\n    const search = async (value) => {\n\n        // If text input is not length of address then search for asset\n        if(value.length < 28) {\n            const res = await Fetch(\"asset\", value)\n            setResult(res)\n        } else {\n        // Search an address\n            const res = await Fetch(\"balances\", value)\n            setResult(res)\n        }\n    }\n\n    // 3. Updates wallet values when async is complete\n    useEffect(() => {\n        console.log(\"RESULT\")\n        console.log(result)\n        // Passes JSON data to parent\n        props.onDataChange(result)\n    }, [result])\n    \n    return (\n        <Navbar collapseOnSelect className=\"navBar\" expand=\"lg\"variant=\"dark\">\n            <Container>\n                <Navbar.Brand href=\"\" className=\"logo\">Counterview.club</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"me-auto\">\n                    {/* <Nav.Link \n                        className={props.pepeFilter.original ? \"selected-filter\" : \"nav-link\"}\n                        onClick={() => {\n                            props.onFilterChange(\"original\")\n                        }}\n                    >OG Peps</Nav.Link> */}\n                    <NavDropdown title=\"OG Peps\">\n                    <NavDropdown.Item>\n                        Coming Soon\n                    </NavDropdown.Item>\n                    </NavDropdown>\n\n                    <Nav.Link \n                        className={props.pepeFilter.fake ? \"selected-filter\" : \"nav-link\"}\n                        onClick={() => {\n                            props.onFilterChange(\"fake\")\n                        }}\n                    >Fakes</Nav.Link>\n                    {/* <Nav.Link \n                        href=\"https://fapep.github.io/FABRIQUE/\"\n                        target=\"_blank\"\n                    >About</Nav.Link> */}\n                    <NavDropdown title=\"Donate\">\n                    <NavDropdown.Item nowrap\n                            onClick={() => {\n                                navigator.clipboard.writeText(\"1EWFR9dMzM2JtrXeqwVCY1LW6KMZ1iRhJ5\")\n                            }}\n                        >\n                            Fabrique\n                    </NavDropdown.Item>\n                    <NavDropdown.Item nowrap\n                            onClick={() => {\n                                navigator.clipboard.writeText(\"1EWFR9dMzM2JtrXeqwVCY1LW6KMZ1iRhJ5\")\n                            }}\n                        >\n                            Copy: 1EWFR9dMzM2JtrXeqwVCY1LW6KMZ1iRhJ5\n                        </NavDropdown.Item>\n                        <NavDropdown.Item \n                        onClick={() => {\n                                navigator.clipboard.writeText(\"hello.fabrique@protonmail.com\")\n                        }}>\n                        Copy email\n                    </NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n                <Form \n                    id=\"search-input\"\n                    className=\"d-flex\"\n                    onClick={(e) => {\n                        // console.log(e.target)\n                    }}\n                    onSubmit={(e) => {\n                        handleSubmit(e)\n                        e.preventDefault()\n                    }}\n                >\n                <AutoComplete \n                    className=\"mr-2 search-field\"\n                    setInput={setInput} \n                    search={search} \n                    input={input} \n                />\n                {/* <FormControl\n                    type=\"search\"\n                    placeholder=\"Search asset or address\"\n                    className=\"mr-2 search-field\"\n                    aria-label=\"Search\"\n                    onChange={(e)=>{\n                        handleInput(e.target.value)\n                    }}\n                /> */}\n                <Button \n                    variant=\"outline-success\"\n                    className=\"search-button\"\n                    onClick={() => {\n                        search(input)\n                    }}\n                >Search</Button>\n                </Form>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    )\n}\n\nexport default NavBar","import React from \"react\"\n\nfunction Gallery(props) {\n\n    return (\n        <div className=\"gallery\">\n            {props.wallet}\n        </div>\n    )\n}\n\nexport default Gallery","import fakeData from \"../data/fakedata.json\"\nimport ogData from \"../data/og_pepe.json\"\n\n// Gets asset data for all wallet contents\nfunction FindSrc(assetName) {\n    let src = \"null\"\n    let series = \"\"\n    // If asset is in fakeData\n    fakeData.forEach(function (fakePepe) {\n        if((assetName) && (assetName === fakePepe[\"asset\"])) {\n            series = fakePepe[\"series\"]\n            src = fakePepe[\"src\"]\n            return false\n        }\n    })\n    // If asset is in og data\n    ogData.forEach(function (ogPepe) {\n        if((assetName) && (assetName === ogPepe[\"asset\"])) {\n            series = \"original\"\n            src = ogPepe[\"src\"]\n            return false\n        }\n    })\n\n    return [src, series]\n}\n\nexport default FindSrc","import React, { Component } from \"react\"\n\nclass LazyImage extends React.Component {\n    state = { src: null };\n\n    componentDidMount() {\n    const { src } = this.props;\n\n    const imageLoader = new Image();\n    imageLoader.src = src;\n\n    imageLoader.onload = () => {\n        this.setState({ src });\n    };\n    }\n\n    render() {\n    return <img src={this.state.src || this.props.placeholder} />;\n    }\n}\n\nexport default LazyImage","export default __webpack_public_path__ + \"static/media/placeholder.e5e9d84e.jpg\";","import React, { useState, useEffect } from \"react\"\nimport Fetch from \"./Fetch\"\nimport LazyImage from \"./LazyImage\"\n\nimport placeholder from \"../data/placeholder.jpg\"\n\n// Takes in image src, asset name and \n// quantity to return an image card for gallery view\n// TODO: Create alternative display for MP4\nfunction CreateCard(props) {\n    const [ toggle, setToggle ] = useState({\n        info: false\n    })\n    const [ info, setInfo ] = useState({\n        supply: 0,\n        est_value: \"$0\",\n        dispenser_price: \"0 BTC\"\n    })\n    const [ callInfo , setCallInfo ] = useState(false)\n\n    // Creates class names for card\n    const className = `image-card ${props.series}`\n\n    // Sets state for info toggle\n    function changeToggle() {\n        setToggle(prevState => ({\n            info: !prevState.info\n        }))\n    }\n\n    // // Runs on call info so not to continuously call\n    // useEffect(() => {\n    //     // Updates asset and market info on toggle\n    //     const updateData = async () => {\n    //         // Update info\n    //         const asset_info = await Fetch(\"asset\", props.asset)\n    //         let val_usd = \"Priceless\"\n    //         if(asset_info[\"estimated_value\"][\"usd\"] > 0.0) {\n    //             val_usd = parseFloat(asset_info[\"estimated_value\"][\"usd\"]).toFixed(4)\n    //         }\n\n    //         // Update dispenser\n    //         const asset_disp = await Fetch(\"dispensers\", props.asset)\n    //         let dispenser_btc = \"\"\n    //         if(asset_disp[\"data\"].length > 0) {\n    //             dispenser_btc = ((parseFloat(asset_disp[\"data\"][0][\"satoshirate\"]).toFixed(4)).toString() + \"BTC\")\n    //         } else {\n    //             dispenser_btc = \"Priceless\"\n    //         }\n\n    //         setInfo(prevState => ({\n    //             supply: asset_info[\"supply\"],\n    //             est_value: val_usd.toString(),\n    //             dispenser_price: dispenser_btc.toString()\n    //         }))\n    //     }\n    //     updateData()\n    // }, [callInfo])\n\n    useState(() => {\n        // console.log(info)\n    }, [info])\n\n\n    // Info component\n    const cardInfo = (\n        <span\n            className=\"card-info\"\n        >\n            <span className=\"fill\"></span>\n            <p>INFO</p>\n            <p><a href={`https://xchain.io/asset/${props.asset}`} target=\"_blank\">XCHAIN</a></p>\n            <p>SUPPLY: {props.quantity}</p>\n            <p>EST VAL: {info.est_value}</p>\n            <p>LAST DISP: {info.dispenser_price}</p>\n        </span>\n    )\n\n    return (\n        <span \n            className={className}\n            onClick={() => {\n                \n            }}\n        >\n            {toggle.info ? cardInfo : null}\n            {/* <img \n                alt={props.asset}\n                src={props.src}\n            /> */}\n            <LazyImage src={props.src} placeholder={placeholder} />\n            <p \n                className=\"asset-info\"\n                onClick={() => {\n                    changeToggle()\n                }}\n            >\n                <span>{props.asset}</span>\n                <span>{props.quantity}</span>\n            </p>\n        </span>\n    )\n}\n\nexport default CreateCard","import './App.css'\nimport React, { useEffect, useState, useReducer } from \"react\"\nimport NavBar from \"./components/NavBar\"\nimport Gallery from \"./components/Gallery\"\nimport FindSrc from \"./components/FindSrc\"\nimport CreateCard from './components/CreateCard'\n\n// TODOD:\n// a. Load only when scroll down\n// 1. Make function that shows list of all fake pepes\n// 2. Make search data pull from form submit\n// 3. Enter submits search not reloads page\n\nfunction App() {\n    // Global variables\n    const [ wallet, setWallet ] = useState([])\n    const [ data, setData ] = useState({})\n    const [ pepeFilter, setPepeFilter ] = useState({\n        original: false,\n        fake: true\n    })\n\n    // Allows writing of parent data from child\n    // function onDataChange(input) {setData(input)}\n    // const onDataChange = input => {\n    //     setData({...data, input})\n    // }\n    function onDataChange(input) {\n        setData(input)\n    }\n    \n    // On data update begin populating gallery\n    useEffect(() => {\n        console.log(\"DATA\")\n        console.log(data)\n        console.log(typeof data)\n        // Filter JSON data for single asset or wallet balance\n        if((typeof data != \"undefined\") && data.asset) {\n            console.log(data.asset)\n            // Get asset details\n            const assetName = data[\"asset\"]\n            const assetQty = data[\"supply\"]\n            let asset_src_series = FindSrc(assetName)   // Checks against fake json and returns img src\n            const assetSrc = asset_src_series[0]\n            const series = asset_src_series[1]\n\n            // Create asset card\n            setWallet(<CreateCard key={1} series={series} asset={assetName} quantity={assetQty} src={assetSrc} type={\"asset\"} />)\n\n        } else if ((typeof data != \"undefined\") && (data.length > 1)) {\n            console.log(\"ADDRESS\")\n            console.log(data.length)\n            // Populate wallet with assets\n            if (data.length > 0) {\n\n                let cardList = []\n                let count = 0\n                const assetList = data\n                \n                assetList.forEach((asset) => {\n                    const assetName = asset[\"asset\"]\n                    const assetQty = asset[\"quantity\"]\n                    let asset_src_series = FindSrc(assetName) // Checks for src\n                    const assetSrc = asset_src_series[0]\n                    const series = asset_src_series[1]\n                    // If asset src is found append to list\n                    if(assetSrc !== \"null\") {\n                        // Check if asset matches filters\n                        if((pepeFilter.original && series === \"original\") || (pepeFilter.fake && series === \"fake\")) {\n                                cardList.push(\n                                    <CreateCard key={count} series={series} asset={assetName} quantity={assetQty} src={assetSrc} pepeFilter={pepeFilter} />\n                                )\n                                // Continue index count\n                                count += 1\n                            }\n                        }\n                })\n                \n                // Update wallet\n                setWallet(cardList)\n            }\n            \n        }\n    }, [data, pepeFilter])\n\n    // FILTER FUNCS\n    function onFilterChange(type) {\n        // If input is original filter toggles allow OG pepes\n        if(type === \"original\") {\n            setPepeFilter(prevState => ({\n                original: !prevState.original,\n                fake: prevState.fake\n            }))\n        } else if (type === \"fake\") {\n        // If input is fake filter toggles allow OG pepes\n            setPepeFilter(prevState => ({\n                original: prevState.original,\n                fake: !prevState.fake\n            }))\n        }\n    }\n\n    return (\n        <div>\n            <NavBar \n                data={data} \n                onDataChange={onDataChange}\n                pepeFilter={pepeFilter}\n                onFilterChange={onFilterChange}\n            />\n            <Gallery \n                wallet={wallet}\n                pepeFilter={pepeFilter}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}